C51 COMPILER V9.60.0.0   MAIN                                                              10/11/2023 10:42:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          #include "port.h" 
   3          #include "../Lib/Delay.h"
   4          
   5          void Soft_SPI_Init();
   6          void Soft_SPI_Write(unsigned char byte);
   7          unsigned char Soft_SPI_Read();
   8          
   9          void EEPROM_25LCxxx_Write(unsigned int add, unsigned char byte );
  10          unsigned char EEPROM_25LCxxx_Read(unsigned int add);
  11          unsigned char EEPROM_25LCxxx_WIP();
  12          
  13          void main(){
  14   1        unsigned char i;
  15   1        //KHOI TAO CHO GIAO TIEP SPI
  16   1        Soft_SPI_Init();
  17   1        for(i = 0; i < 100; i++){
  18   2          EEPROM_25LCxxx_Write(i,i);
  19   2        }
  20   1        
  21   1      
  22   1        while(1){
  23   2          for(i = 0 ; i < 100; i++){
  24   3            P1 = EEPROM_25LCxxx_Read(0);
  25   3            Delay(500);
  26   3          }
  27   2        }
  28   1      
  29   1      }
  30          
  31          void EEPROM_25LCxxx_Write(unsigned int add, unsigned char byte )
  32          {
  33   1        SPI_CS = 0;
  34   1        Soft_SPI_Write(0x06);   //gui lenh WREN
  35   1        SPI_CS = 1;
  36   1        
  37   1        SPI_CS = 0;
  38   1        Soft_SPI_Write(0x02);
  39   1        Soft_SPI_Write(add >> 8);   // gui 1 byte cao cua dia chi
  40   1        Soft_SPI_Write(add & 0x00ff);   //gui byte thap cua dia chi di
  41   1        Soft_SPI_Write(byte);
  42   1        SPI_CS = 1;
  43   1        
  44   1        
  45   1        while(EEPROM_25LCxxx_WIP());
  46   1      }
  47          //Giao tiep spi mode 1
  48          //Ham khoi tao SPI
  49          void Soft_SPI_Init(){
  50   1        SPI_CS = 1;
  51   1        SPI_MISO = 1;
  52   1        SPI_SCLK = 0;
  53   1      }
  54          
C51 COMPILER V9.60.0.0   MAIN                                                              10/11/2023 10:42:30 PAGE 2   

  55          //HAM GUI 1 BYTE SANG CHO SLAVE
  56          void Soft_SPI_Write(unsigned char byte){
  57   1        unsigned char i;
  58   1        for(i = 0; i < 8 ; i++){//lay bit cao truoc
  59   2          if(byte & 0x80)
  60   2            SPI_MOSI = 1;
  61   2          else
  62   2            SPI_MOSI = 0;
  63   2          
  64   2          SPI_SCLK = 1;
  65   2          SPI_SCLK = 0;
  66   2          byte <<= 1;
  67   2        }
  68   1      }
  69          
  70          
  71          
  72          //Ham nhan 1 byte tu Slave
  73          unsigned char Soft_SPI_Read(){
  74   1        unsigned char i , byte;
  75   1        for(i = 0; i < 8; i++){
  76   2          byte <<= 1; //dua bit thap nhat ve 0;
  77   2          SPI_SCLK = 1;
  78   2          if(SPI_MISO)
  79   2            byte |= 0x01;
  80   2          SPI_SCLK = 0;
  81   2        }
  82   1        return byte;
  83   1        
  84   1      }
  85          
  86          
  87          unsigned char EEPROM_25LCxxx_Read(unsigned int add){
  88   1        unsigned char byte;
  89   1        SPI_CS = 0;                 
  90   1        Soft_SPI_Write(READ);       //Gui lenh doc
  91   1        Soft_SPI_Write(add >> 8);   //Gui byte cao cua dia chi
  92   1        Soft_SPI_Write(add & 0x00FF);       //Gui byte thap
  93   1        byte = Soft_SPI_Read();
  94   1        return byte;
  95   1      }
  96          
  97          
  98          unsigned char EEPROM_25LCxxx_WIP()
  99          {
 100   1        unsigned result;
 101   1        SPI_CS = 0;
 102   1        Soft_SPI_Write(RDSR);
 103   1        result = Soft_SPI_Read();
 104   1        SPI_CS = 1;
 105   1        return result & 0x01;
 106   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    224    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              10/11/2023 10:42:30 PAGE 3   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
